<!-- HTML, CSS ET JS par Pierre LUYPAERT-->
<!DOCTYPE html>
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta name="author" content="Pierre LUYPAERT">
        <title>PixelWAR</title>
        <script src="/assets/vendor/jquery-3.6.0.js"></script>
        <script src="/assets/vendor/jquery-ui.js"></script>
        <link rel="stylesheet" href="/assets/css/styles.css">
        <script type="text/javascript" src="/assets/js/vue.js"></script>
        <link rel="stylesheet" href="/assets/css/loader.css">
        <script src="/assets/js/cute-alert-master/cute-alert.js"></script>
        <link rel="stylesheet" href="/assets/js/cute-alert-master/style.css"/>
    </head>
    <body>
        <%- include('background.ejs') %>
        <script>
            //Définition des variables du canva
            let drag = false; // s'il est actuellement en train de drag
            let zoomFactor = 0.15 // changement d'un zoom à l'autre
            var zoomValue = 4; // zoom par défaut
            var lastPixelChangedX, lastPixelChangedY; //dernier pixel changer (pour le remettre si on décide de placer le pixel ailleurs avant envoi)
            var lastPixelData, r, g, b; // pour réecrire les couleurs si on change de pixel
            var isWaiting = true; // savoir si on attend la fin du chrono
            var temps = 0; // temps restant
        </script>
        <div class="body-container" id="app">
            <div v-if="isLoading" class="lds-ellipsis center"><div></div><div></div><div></div><div></div></div>
            <!-- Notre canva -->
            <div id="painting">
                <canvas id="canva"></canvas>
            </div>
            <!-- Fin de notre canva -->
            <%- include('menu.ejs', {logged: logged}) %>
            <div class="footer bg-main" style="overflow-x: scroll; overflow-y:hidden;">
                <div class="footer-box">
                    <a target="_blank" href="https://www.makeuseof.com/what-is-rplace-reddit-art-experiment/#:~:text=The%20concept%20behind%20r%2FPlace%20is%20pretty%20simple.,or%20tile%20of%20whichever%20color."><img class="imgbtn" id="rules" src="/assets/imgs/book.png"></a>
                </div>
                <div class="footer-box">
                    <p onselectstart="return false" id="info-picker">(0;0)</p>
                    <input type="color" id="head" name="head" class="color-picker" value="#e66465">
                </div>
                <button disabled class="valid btn" id="send-btn">ENVOYER<div :class="{icon:true, locked:attente, join:!attente}"></div></button>
                <div class="footer-box">

                    <div v-if="isLoading" class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
                    <p  v-else id="chrono">                        
                        <label id="chronotime">00:00</label><label id="min">min</label>
                    </p>
                </div>
                
                <div class="footer-box">
                    <img class="imgbtn" id="print" src="/assets/imgs/printer.png">
                </div>
            </div>
        </div>
        <script>            
            
            const app = new Vue({
                el:"#app",
                data: {
                    attente:isWaiting,
                    isLoading: true,
                },
                methods: {
                    //savoir si le bouton est disabled
                    isDisabled:function() {
                        return $('#send-btn')[0].disabled;
                    }
                },
                mounted() {
                }
            })

            // récupération du canva
            function canva_get() {
                var dataToPost = {
                    idCanva: '<%= idCanva %>'
                };
                //On récupère l'image entière du canva quand on accède au canva
                $.ajax({
                    type: 'POST',
                    url: '/canvas/' + dataToPost.idCanva +'/getImage',
                    data: dataToPost,
                    responseType: 'arraybuffer',
                    cache:false,
                    mimeType: 'image/png',
                    success: function (data,status,xhr) {
                        // Create an image object from the response data
                        var image = new Image();
                        image.src = "data:image/png;base64,"+data;

                        // Draw the image on the canvas
                     
                        image.onload = function () {
                            var canvas = document.getElementById('canva');
                            canvas.width = image.width;
                            canvas.height = image.height;
                            var ctx = canvas.getContext('2d');
                            ctx.drawImage(image, 0, 0);
                            
                            app.isLoading = false;
                            let urlChrono = '/canvas/' + dataToPost.idCanva + "/timer";
                            
                            //Récupération du chrono
                            if('<%=login%>'!='') {
                                $.ajax({
                                    type: 'POST',
                                    url: urlChrono,
                                    success: function (data, e, xhr) {
                                        isWaiting = data != 0;
                                        enableChrono(data);
                                    }
                                });
                            }
                        }

                    },
                    error: function (err) {
                        console.log(err);
                    }
                });

            }
            canva_get();
            //Puis on demande l'update toutes les secondes du canva
            var updateCanva = setInterval(function () {
                afficherUpdateCanva();
            }, 1000);

            function afficherUpdateCanva() {
                //Récupération des derniers pixels posés depuis la dernière update
                $.getJSON('/canvas/' + '<%= idCanva %>' +'/getDerniersPixels', function(data) {
                    //Pour chaque pixel, on l'affiche sur le canva
                    data.forEach( pix => { 
                        ajouterPixelLocal(canvas, pix.pxl_x+1, pix.pxl_y+1, pix.couleur);
                    })
                });
            }

        </script>
        <script>
            var x = 0;
            var y = 0;
            // récupération de l'élement canva et painting
            const canvas = document.getElementById("canva");
            const painting = $("#painting");
            const ctx = canvas.getContext("2d", {willReadFrequently: true});
            ctx.webkitImageSmoothingEnabled = false;
            ctx.mozImageSmoothingEnabled = false;
            ctx.imageSmoothingEnabled = false;

            /* Cette partie du code n'est pas la mienne */
            const image = new Image(100, 100); // Using optional size for image
            image.onload = drawImageActualSize; // Draw when image has loaded

            function drawImageActualSize() {
                // Use the intrinsic size of image in CSS pixels for the canvas element
                canvas.width = this.naturalWidth;
                canvas.height = this.naturalHeight;

                // Will draw the image as 300x227, ignoring the custom size of 60x45
                // given in the constructor
                ctx.drawImage(this, 0, 0);

                // To use the custom size we'll have to specify the scale parameters
                // using the element's width and height properties - lets draw one
                // on top in the corner:
                ctx.drawImage(this, 0, 0, this.width, this.height);
            }

            /* Fin de la partie du code provenant d'un site extérieur */

            const canvaJQ = $("#canva")
            // On applique le zoom par défaut
            $('#canva').css('transform', 'scale(' + zoomValue * zoomFactor + ')');

            //Fonction qui récupère la position du clic relatif à l'élement canva.
            function getCursorPosition(canvas, event) {
                const rect = canvas.getBoundingClientRect()
                x = Math.ceil((event.clientX - rect.left)/(zoomValue*zoomFactor))
                y = Math.ceil((event.clientY - rect.top)/(zoomValue*zoomFactor))
                if(!isWaiting)
                {
                    // Si le chrono est terminé, on laisse l'utilisateur choisir son pixel.
                    $('#info-picker').text("("+ y + ";" + x + ")");
                    changerCouleurPixelLocal(canvas,x,y);
                }
            }

            //Fonction qui modifie la couleur des pixels avant envoi
            async function changerCouleurPixelLocal(canvas,x,y, color=null) {
                if (lastPixelData) 
                    ctx.putImageData(lastPixelData, lastPixelChangedX-1, lastPixelChangedY-1);
                lastPixelData = ctx.getImageData(x-1,y-1,1,1);
                lastPixelChangedX = x;
                lastPixelChangedY = y;
                let data = ctx.getImageData(x-1,y-1,1,1);
                if (color==null)
                    color = $(".color-picker").val();

                r = parseInt(color.substr(1,2), 16)
                g = parseInt(color.substr(3,2), 16)
                b = parseInt(color.substr(5,2), 16)
                data.data[0] = r
                data.data[1] = g
                data.data[2] = b 
                ctx.putImageData(data, x-1, y-1);
                $("#send-btn").removeAttr("disabled");
            }

            //Ajouter un pixel sans remplacer le dernier posé
            async function ajouterPixelLocal(canvas,x,y,color) {
                let data = ctx.getImageData(x-1,y-1,1,1);
                color = color.replace("0x", "#");
                color = color.substr(0,7);
                r = parseInt(color.substr(1,2), 16)
                g = parseInt(color.substr(3,2), 16)
                b = parseInt(color.substr(5,2), 16)
                data.data[0] = r
                data.data[1] = g
                data.data[2] = b 
                ctx.putImageData(data, x-1, y-1);
            }

            //Envoi d'un pixel
            function envoyerPixel(e) {
                e.preventDefault();
                lastPixelData = undefined;
                isWaiting = true;
                app.attente = isWaiting;
                $('#info-picker').text("(0;0)");
                $("#send-btn").attr("disabled", true);

                let dataToPost = {
                    x:  x-1,
                    y:  y-1,
                    color:  $(".color-picker").val().replace("#","0x")
                }

                //URL AJAX
                let url = '/canvas/' + '<%= idCanva %>' + "/pose";

                $.ajax({
                    type: 'POST',
                    url: url,
                    data : dataToPost,
                    success: function (data, e, xhr) {
                        cuteToast({
                            type: "success", // or 'info', 'error', 'warning'
                            title:"Bravo " + '<%= login %>' + " !",
                            message: "Pixel envoyé",
                            timer: 5000,
                            img:"success.svg"
                        });
                        let urlChrono = '/canvas/' + '<%= idCanva %>' + "/timer";
                            
                        //Récupération du chrono
                        $.ajax({
                            type: 'POST',
                            url: urlChrono,
                            success: function (data, e, xhr) {
                                enableChrono(data);
                            }
                        });
                    },
                });

            }
            //Affichage du chrono dans la page
            function enableChrono(timing) {
                let temps = timing;
                var chrono = setInterval(function () {
                    let minutes = parseInt(temps / 60, 10);
                    let secondes = parseInt(temps % 60, 10);

                    minutes = minutes < 10 ? "0" + minutes : minutes;
                    secondes = secondes < 10 ? "0" + secondes : secondes;

                    $('#chronotime').text(`${minutes}:${secondes}`);
                    temps -= 1;
                    if (temps < 0) {
                        clearInterval(chrono);
                        isWaiting = false;
                        app.attente = isWaiting;
                    }
                }, 1000);
            }

            document.addEventListener('mousedown', () => drag = false);
            document.addEventListener('mousemove', () => drag = true);
            $("#send-btn").on('click', function(e)  {envoyerPixel(e)});
            $("#print").on("click",  function(e)  { print('#canva', 'html') } ); //to fix
            canvaJQ.on('mouseup', function(e) { if (!drag && '<%= logged %>') getCursorPosition(canvas, e) });

            /* ZOOM AND DRAG */
            $( function() {
                $("#canva").draggable();
            });

            var zoom = function(clicks){
                if (clicks > 0) 
                    zoomValue++;
                else if ((zoomValue-1)*zoomFactor > 0)
                    zoomValue--;
                    
                $('#canva').css('transform', 'scale(' + zoomValue * zoomFactor + ')');  
            }

            var handleScroll = function(evt){
                var delta = evt.wheelDelta ? evt.wheelDelta/40 : evt.detail ? -evt.detail : 0;
                if (delta) zoom(delta);
                return evt.preventDefault() && false;
            };

            painting.on('wheel', function(evt){
                handleScroll(evt.originalEvent);
            });

        </script>
    </body>
</html>